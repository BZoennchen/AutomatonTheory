package grammar.inter;

import symbol.IJezSymbol;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/**
 * A SLP i.e. a CFG that is acyclic and that contains for each non-terminal only one production.
 *
 * @author Benedikt Zoennchen
 *
 * @param <N>   the type of the identifier of terminal and non-terminal symbols of the grammar
 * @param <S>   the type of the terminal and non-terminal symbols of the grammar
 * @param <W>   the type of the right-hand side of the grammar
 * @param <P>   the type of the grammar production
 */
public interface ISLP<N, S extends IJezSymbol<? extends N>, W extends IReferencedWord<? extends N, S>, P extends IProduction<? extends N, S, W>> extends ICFG<N, S, W, P> {

    /**
     * Returns a topological ordered list of production (in descending topological order).
     *
     * @return a topological ordered list of production
     */
    LinkedList<P> getOrderedProductions();

    /**
     * Returns the production of the non-terminal.
     *
     * @param symbol the non-terminal
     * @return the production of the non-terminal
     */
    P getProduction(S symbol);

    /**
     * Return a mapping : X -> p such that lhs(p) = X.
     *
     * @return a mapping : X -> p such that lhs(p) = X.
     */
    Map<S, P> getSLPProductions();

    /**
     * Returns true if this SLP defines only one word, otherwise false.
     *
     * @return true if this SLP defines only one word, otherwise false
     */
    boolean isSingleton();

    /**
     * Returns true if there is a production for the non-terminal left, otherwise false.
     *
     * @param left the non-terminal
     * @return true if there is a production for the non-terminal left, otherwise false.
     */
    boolean containsProduction(final S left);

    /**
     * Deletes a production of this SLP defined by the non-terminal left. This will be used only by the
     * recompression algorithm.
     *
     * @param left a non-terminal of this SLP
     */
    void deleteProduction(final S left);

    /**
     * Returns a list of jez symbols defining the word val(X). If X is a non-terminal
     * val(X) is the word generated by X otherwise the list just contain the terminal X.
     *
     * @param left  a terminal or non-terminal symbol.
     * @return a list of jez symbols defining the word val(X)
     */
    List<S> value(final S left);

    /**
     * Returns a list of elements of jez symbols defining the word val(X). If X is a non-terminal
     * val(X) is the word generated by X otherwise the list just contain the terminal X.
     *
     * @param left  a terminal or non-terminal symbol.
     * @return a list of elements of jez symbols defining the word val(X)
     */
    List<?> word(final S left);

    /**
     * returns val(S).toString().
     *
     * @param left a non-terminal or terminal
     * @return val(S).toString().
     */
    String toString(final S left);

    /**
     * clones the SLP.
     * @return a clone of the SLP
     */
    ISLP<N, S, W, P> clone();

    /**
     * Returns a SLP that does not contain non-trivial epsilon-productions and
     * represents the same words.
     * @return a SLP that does not contain non-trivial epsilon-productions
     */
    ISLP<N, S, W, P> eliminateEpsilon();

    /**
     * Returns the length of the non-terminal X i.e. |val(X)|.
     *
     * @param left      the non-terminal
     * @param changed   true => recompute the lengths, we require this since the recompression algorithm changes the SLP. Otherwise no recompution takes place.
     * @return the length of the non-terminal X i.e. |val(X)|
     */
    long length(final S left, final boolean changed);

    /**
     * Returns the length of the non-terminal X i.e. |val(X)|. No recomputation takes place.
     *
     * @param left      the non-terminal
     * @return the length of the non-terminal X i.e. |val(X)|
     */
    long length(final S left);

    /**
     * Returns the length of the non-terminal X i.e. |val(S)|, where S is the axiom. No recomputation takes place.
     *
     * Requirement: the SLP is a singleton set
     *
     * @return the length of the non-terminal X i.e. |val(S)|
     */
    long length();

    /**
     * Returns the jez symbol val(left)[k].
     *
     * @param left  a non-terminal of the SLP
     * @param k     a position with 1 <= k <= |val(left)|
     * @return the jez symbol val(left)[k].
     */
    S get(final S left, long k);
}
