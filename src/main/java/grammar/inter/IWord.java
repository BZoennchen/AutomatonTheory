package grammar.inter;

import data.Node;
import symbol.Symbol;

import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;
import java.util.stream.Stream;

/**
 * A word of the grammar e.g. the right-hand side of a grammar production.
 *
 * @author Benedikt Zoennchen
 *
 * @param <S>   the type of the terminal and non-terminal symbols of the grammar
 */
public interface IWord<S extends Symbol> extends Iterable<S>{

    /**
     * returns the i-th symbol of the word (from the left).
     *
     * @param i the index of the symbol
     * @return the i-th symbol of the word (from the left)
     */
    S get(final int i);

    /**
     * Returns a stream of symbols.
     *
     * @return a stream of symbols
     */
    Stream<S> stream();

    /**
     * Returns an iterator for iterating over all symbols of this word.
     *
     * @return an iterator for iterating over all symbols of this word
     */
    Iterator<S> iterator();

    /**
     * Clones this word.
     *
     * @return a clone of this word
     */
    IWord<S> clone();

    /**
     * Returns a list of all symbols contained in the word satisfy the predicate condition.
     *
     * @param pred the predicate condition
     * @return a list of all symbols
     */
    List<S> findAll(final Predicate<S> pred);

    /**
     * Converts the word into a list of symbols.
     *
     * @return a list of symbols
     */
    List<S> toList();

    /**
     * Returns a list of all pointers to symbols contained in the word satisfy the predicate condition.
     *
     * @param pred the predicate condition
     * @return a list of all pointers of symbols
     */
    List<Node<S>> findAllNodes(Predicate<S> pred);

    /**
     * Returns the last symbol (from the left) satisfying the predicate condition or empty if there is no such symbol.
     *
     * @param pred the predicate condition
     * @return the last symbol (from the left) satisfying the predicate condition or empty if there is no such symbol.
     */
    Optional<S> findLast(final Predicate<S> pred);

    /**
     * Returns the first symbol (from the left) satisfying the predicate condition or empty if there is no such symbol.
     *
     * @param pred the predicate condition
     * @return the last symbol (from the left) satisfying the predicate condition or empty if there is no such symbol.
     */
    Optional<S> findFirst(final Predicate<S> pred);

    /**
     * Let a_1a_2a_3a_4a_5 be the word and a_2 a_4 satisfy the predicate condition then the result are three lists.
     * [a_1, a_2], [a_3, a_4], [a_5]
     *
     * @param predicate the predicate condition
     * @return a list of lists representing sub words generated by splits at the position of a symbol satisfying the predicate condition
     */
    List<List<S>> split(final Predicate<S> predicate);

    /**
     * Creates a new word such that this word is concatenated by the word.
     *
     * @param word the word concatenated at the end of this word
     * @return a new word such that this word is concatenated by the word
     */
    IWord<S> concat(IWord<S> word);

    /**
     * Appends a symbol to this word.
     *
     * @param symbol the symbol that will be appended
     * @return this word appended with the symbol
     */
    IWord<S> append(S symbol);

    /**
     * Suspend a symbol to this word.
     *
     * @param symbol the symbol that will be appended
     * @return this word suspended with the symbol
     */
    IWord<S> suspend(S symbol);

    /**
     * Deletes the last symbol of this word.
     *
     * @return this word where the last symbol is deleted
     */
    IWord<S> deleteLast();

    /**
     * Deletes the first symbol of this word.
     *
     * @return this word where the first symbol is deleted
     */
    IWord<S> deleteFirst();

    /**
     * Returns true if the length of the word is equal 0.
     *
     * @return true if the length of the word is equal 0, otherwise false
     */
    boolean isEmpty();

    /**
     * Returns true if the length of the word is equal 1.
     *
     * @return true if the length of the word is equal 1, otherwise false
     */
    boolean isSingleton();

    /**
     * Returns the length of the word.
     *
     * @return the length of the word
     */
    int length();

    /**
     * Returns the first symbol of the word.
     *
     * @return the first symbol of the word
     */
    S getFirst();

    /**
     * Returns the last symbol of the word.
     *
     * @return the last symbol of the word
     */
    S getLast();
}
